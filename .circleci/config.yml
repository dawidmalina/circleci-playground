# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

orbs:
  # tailscale: crowley-namespace/tailscale@1.0.0
  tailscale: motivaventures/circleci-tailscale@1.0.0
  playground: dawidmalina/circleci-playground@0.0.2

# Specify the execution environment. You can specify an image from Docker Hub or use one of our convenience images from CircleCI's Developer Hub.
# See: https://circleci.com/docs/configuration-reference/#executor-job
executors:
  default:
    docker:
      - image: cimg/base:stable

.release-filters-test: &release-filters-test
  tags:
    only: /^v.*-test.*/
  branches:
    ignore: /.*/

.release-filters: &release-filters
  tags:
    ignore: /^v.*-test.*/
  branches:
    ignore: /.*/

.main-filters: &main-filters
  branches:
    only: main
  tags:
    ignore: /.*/

commands:
  echo-command:
    parameters:
      message:
        description: message to be printed
        type: string
        default: ""
      title:
        description: step name
        type: string
        default: job
    steps:
      - run:
          name: << parameters.title >>
          command: |
            echo Say << parameters.message >>!

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/configuration-reference/#jobs
jobs:
  test:
    executor: default
    resource_class: small
    parameters:
      environment:
        type: string
        default: 'aaa'
      extension:
        type: string
        default: 'bbb'
      message:
        type: string
        default: 'ccc'
    steps:
      - echo-command:
          title: Test
          message: |
            environment: << parameters.environment >>
            extension: << parameters.extension >>
            message: << parameters.message >>

  init-job:
    executor: default
    resource_class: small
    # Add steps to the job
    # See: https://circleci.com/docs/configuration-reference/#steps
    steps:
      # - checkout
      - echo-command:
          title: Init
          message: "Init!"

  say-hello:
    executor: default
    resource_class: small
    # Add steps to the job
    # See: https://circleci.com/docs/configuration-reference/#steps
    steps:
      - echo-command:
          title: "Say hello"
          message: "Hello!"

  say-world:
    executor: default
    resource_class: small
    # Add steps to the job
    # See: https://circleci.com/docs/configuration-reference/#steps
    steps:
      - echo-command:
          title: "Say world"
          message: "World!"

  deploy:
    # Specify the execution environment. You can specify an image from Docker Hub or use one of our convenience images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/configuration-reference/#executor-job
    executor: default
    resource_class: small
    steps:
      - echo-command:
          title: "Deploy"
          message: "Deploy!"

  use-tailscale:
    # Specify the execution environment. You can specify an image from Docker Hub or use one of our convenience images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/configuration-reference/#executor-job
    executor: default
    resource_class: small
    steps:
      - tailscale/proxychains
      - playground/tailscale
      # - tailscale/install
      # - tailscale/connect
      - run:
          name: connectivity
          command: |
            echo "tailscale"
            tailscale --socket=/tmp/tailscaled.sock status
            tailscale --socket=/tmp/tailscaled.sock ping vlci01
            tailscale --socket=/tmp/tailscaled.sock ip -4 vlci01

            echo "nc"
            proxychains nc -vz -w 3 $( tailscale --socket=/tmp/tailscaled.sock ip -4 vlci01 ) 443 || echo "error"

            echo "curl"
            proxychains curl -L --connect-timeout 3 -v https://$( tailscale --socket=/tmp/tailscaled.sock ip -4 vlci01 ) || echo "error"

            echo "ps"
            ps -efww

# Orchestrate jobs using workflows
# See: https://circleci.com/docs/configuration-reference/#workflows
workflows:
  tagged-build:
    jobs:
      - init-job:
          filters: *release-filters
      - test:
          filters: *release-filters
          requires:
            - init-job
          matrix:
            parameters:
              extension: ['table', 'form']
              message: ['xxx', 'yyy']
      # - use-tailscale:
      #     filters: *release-filters
      #     requires:
      #       - init-job

  tagged-test-build:
    jobs:
      - init-job:
          filters: *release-filters-test
      - use-tailscale:
          filters: *release-filters-test
          requires:
            - init-job

  say-hello-workflow:
    jobs:
      - init-job:
          filters: *main-filters
      - use-tailscale:
          filters: *main-filters
          requires:
            - init-job
      # - say-hello:
      #     requires:
      #       - init-job
      # - say-world:
      #     requires:
      #       - init-job
      # - hold:
      #     type: approval
      #     requires:
      #       - say-hello
      #       - say-world
      # - deploy:
      #     requires:
      #       - hold
